# -*- coding: utf-8 -*-
"""IndicadoresCT_dise침o.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iS5xYrdDTMowKI12O8mfF96FjPtGN8yQ
"""

import streamlit as st
import pandas as pd
from PIL import Image
import io
from base64 import b64encode
import requests

# === Funci칩n para cargar im치genes ===
def load_image(image_path):
    try:
        # Intentar cargar la imagen localmente
        image = Image.open(image_path)
    except:
        # Si no se encuentra localmente, cargar la imagen desde GitHub
        image = Image.open(requests.get(image_path, stream=True).raw)
    return image

# === Cargar los logos y mostrarlos juntos ===
logo_url = "https://github.com/MichaelQuinteros/ct/blob/main/Logo.jpg?raw=true"
punche_url = "https://github.com/MichaelQuinteros/ct/blob/main/Punche.jpg?raw=true"

# Cargar las im치genes
logo = load_image(logo_url)
logo_resized = logo.resize((int(logo.size[0] * 1.2), int(logo.size[1] * 1.2)), Image.LANCZOS)  # Reducir un poco el tama침o de Logo.jpg
buffered_logo = io.BytesIO()
logo_resized.save(buffered_logo, format="PNG")
img_logo_str = b64encode(buffered_logo.getvalue()).decode()

punche = load_image(punche_url)
punche_resized = punche.resize((int(punche.size[0] * 1.4), int(punche.size[1] * 1.4)), Image.LANCZOS)  # Aumentar el tama침o de Punche.jpg
buffered_punche = io.BytesIO()
punche_resized.save(buffered_punche, format="PNG")
img_punche_str = b64encode(buffered_punche.getvalue()).decode()

st.markdown(f"""
    <div style='display: flex; align-items: center; gap: 30px;'>
        <img src='data:image/png;base64,{img_logo_str}' style='height: 75px;'>  <!-- Ajustar la altura -->
        <img src='data:image/png;base64,{img_punche_str}' style='height: 100px;'>  <!-- Ajustar la altura -->
    </div>
    <div style='margin-top: 10px;'>
        <h1 style='font-size: 20pt; color: #204d26;'>Indicadores JUT</h1>
        <h2 style='font-size: 14pt; color: #204d26;'>Tablero de control para indicadores JUT</h2>
    </div>
""", unsafe_allow_html=True)

# === Estilo personalizado y moderno ===
tabla_css = """
<style>
body {
    background-color: #f9fafb;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
}
h2, h3 {
    color: #204d26 !important;
    font-weight: 600;
}
section.main > div {
    padding: 10px;
    background-color: #ffffff;
    border-radius: 12px;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    margin-bottom: 20px;
}
table {
    font-size: 11px !important;
    font-family: Arial, sans-serif !important;
    border-collapse: collapse;
    width: 100%;
    table-layout: auto !important;
    margin-top: 10px;
    background-color: #fff;
    box-shadow: 0 1px 2px rgba(0,0,0,0.05);
    border-radius: 6px;
    overflow: hidden;
}
th, td {
    padding: 6px 8px !important;
    text-align: center !important;
    vertical-align: middle !important;
    white-space: nowrap;
}
th {
    background-color: #dff0d8 !important;
    font-weight: bold !important;
    color: #204d26 !important;
}
th:nth-child(2), td:nth-child(2) {
    text-align: left !important;
}
tr:last-child td {
    background-color: #e6e6e6 !important;
    border-top: 2px solid #999 !important;
    font-weight: bold !important;
}
</style>
"""
st.markdown(tabla_css, unsafe_allow_html=True)

# === Funciones de carga y procesamiento ===
@st.cache_data
def cargar_datos():
    df = pd.read_excel("Ejecucion.xlsx", dtype={"cod_expediente": str})
    df["porc_ejec_plazo"] = df["num_mes_ejecucion"] / df["num_plazo"]
    df["dentro_plazo"] = df["porc_ejec_plazo"] <= 1
    df["Indicador1"] = df["dentro_plazo"].apply(lambda x: "Dentro del plazo" if x else "Fuera del plazo")
    df["Indicador2"] = df["Rendicion-presentada-gasto-autorizada"]
    df["Indicador3"] = df["devengado-aprobado"]
    df["Indicador4"] = df["financ-ejec-progr"]
    df["Indicador5"] = df["avan-fis-ejec-progr"]
    return df

@st.cache_data
def cargar_cisco():
    df_cisco = pd.read_excel("Cisco.xlsx")
    df_cisco = df_cisco.fillna(0)
    enteros = ["Reitera1", "Reitera2", "Reitera3", "Primeravez", "TG", "ProyectosObservados", "ProyectosRevisados"]
    for col in enteros:
        df_cisco[col] = pd.to_numeric(df_cisco[col], errors='coerce').fillna(0).astype(int)
    df_cisco["Reiteraciones"] = pd.to_numeric(df_cisco["Reiteraciones"], errors="coerce").fillna(0)
    df_cisco.rename(columns={
        "UT": "Unidad Territorial",
        "Reitera1": "N춿<br>reitera<br>>=1",
        "Reitera2": "N춿<br>reitera<br>>=12",
        "Reitera3": "N춿<br>reitera<br>>=4",
        "Primeravez": "Primera<br>vez",
        "TG": "Total<br>General",
        "ProyectosObservados": "N춿<br>Proy<br>obs",
        "ProyectosRevisados": "N춿<br>Proyectos<br>Revisados"
    }, inplace=True)
    for col in ["F1", "F2", "F3", "C치lculo"]:
        if col in df_cisco.columns:
            df_cisco[col] = pd.to_numeric(df_cisco[col], errors='coerce').fillna(0).round(2)
    df_cisco["Reiteraciones_raw"] = (df_cisco["Reiteraciones"] * 100).round(0).astype(int)
    df_cisco["Reiteraciones"] = df_cisco["Reiteraciones_raw"].astype(str) + "%"
    df_cisco[" "] = df_cisco["Reiteraciones_raw"].apply(clasificar)
    df_cisco.insert(0, "N춿", range(1, len(df_cisco) + 1))
    total_row = df_cisco.drop(columns=[" ", "Reiteraciones", "Reiteraciones_raw"]).select_dtypes(include=[int, float]).sum(numeric_only=True)
    total_row["Unidad Territorial"] = "TOTAL GENERAL"
    total_row["N춿"] = ""
    total_row["Reiteraciones_raw"] = df_cisco["Reiteraciones_raw"].sum() // len(df_cisco)
    total_row["Reiteraciones"] = str(int(total_row["Reiteraciones_raw"])) + "%"
    total_row[" "] = clasificar(int(total_row["Reiteraciones_raw"]))
    for col in ["N춿 reitera >=1", "N춿 reitera >=12", "N춿 reitera >=4", "Primera vez", "Total General", "N춿 Proy obs", "N춿 Proyectos Revisados"]:
        if col in total_row:
            total_row[col] = int(total_row[col])
    df_cisco = pd.concat([df_cisco, pd.DataFrame([total_row])], ignore_index=True)
    df_cisco.drop(columns=["Reiteraciones_raw"], inplace=True)
    return df_cisco

@st.cache_data
def cargar_liq():
    df_liq = pd.read_excel("Liq.xlsx")
    df_liq = df_liq.fillna(0)
    df_liq["A침o T칠rmino"] = pd.to_datetime(df_liq["fec_termino_ejecucion"], errors='coerce').dt.year
    return df_liq

def clasificar(valor):
    if valor < 80:
        return "<span style='color:red'>游댵 Rojo</span>"
    elif 80 <= valor < 90:
        return "<span style='color:orange'>游댲 Amarillo</span>"
    else:
        return "<span style='color:green'>游댶 Verde</span>"

def contar_mayor_90(x):
    return (x >= 0.9).sum()

def contar_mayor_80(x):
    return ((x >= 0.8) & (x < 0.9)).sum()

def contar_menor_80(x):
    return ((x < 0.8) & (x != 0) & (~x.isna()) & (x != float("inf"))).sum()

def contar_error(x):
    return ((x == 0) | (x.isna()) | (x == float("inf"))).sum()

# === Cargar los datos ===
df = cargar_datos()
df_cisco = cargar_cisco()
df_liq = cargar_liq()

# === Crear pesta침as ===
tabs = st.tabs([f"Indicador {str(i+1).zfill(2)}" for i in range(7)] + ["Consolidado"])

# === Indicadores 01 al 07 ===

# === Pesta침a Consolidado ===
with tabs[-1]:
    st.markdown("<h2 style='font-size: 12pt;'>Consolidado de Indicadores JUT</h2>", unsafe_allow_html=True)

    ind01 = df.groupby("txt_zonal")["dentro_plazo"].mean().reset_index()
    ind01["% Ind01"] = (ind01["dentro_plazo"] * 100).round(2)
    ind01["Estado 01"] = ind01["% Ind01"].apply(clasificar)

    for i, ind in enumerate(["Indicador2", "Indicador3", "Indicador4", "Indicador5"], start=2):
        temp = df.groupby("txt_zonal")[ind].apply(lambda x: (x >= 0.9).sum() / x.count()).reset_index(name=f"% Ind0{i}")
        temp[f"% Ind0{i}"] = (temp[f"% Ind0{i}"] * 100).round(2)
        temp[f"Estado 0{i}"] = temp[f"% Ind0{i}"].apply(clasificar)
        ind01 = ind01.merge(temp, on="txt_zonal", how="left")

    ind07_base = df_liq.copy()
    ind07_base["peso"] = ind07_base["anho_inicio_ejec"].map({2018: 4, 2019: 3, 2020: 2, 2021: 1}).fillna(0)
    ponderado_df = ind07_base.groupby("txt_zonal").apply(
        lambda x: (1 - (x["peso"].sum() / x.shape[0])) * 100 if x.shape[0] > 0 else 0
    ).reset_index(name="% Ind07")
    ponderado_df["% Ind07"] = ponderado_df["% Ind07"].round(2)
    ponderado_df["Estado 07"] = ponderado_df["% Ind07"].apply(clasificar)
    ponderado_df.rename(columns={"txt_zonal": "Unidad Territorial"}, inplace=True)

    df_cisco_consolidado = df_cisco.copy()
    df_cisco_consolidado = df_cisco_consolidado[df_cisco_consolidado["Unidad Territorial"] != "TOTAL GENERAL"]
    df_cisco_consolidado = df_cisco_consolidado[["Unidad Territorial", "Reiteraciones"]]
    df_cisco_consolidado["% Ind06"] = df_cisco_consolidado["Reiteraciones"].str.replace("%", "").astype(float)
    df_cisco_consolidado["Estado 06"] = df_cisco_consolidado["% Ind06"].apply(clasificar)

    consolidado = ind01.rename(columns={"txt_zonal": "Unidad Territorial"}).merge(
        df_cisco_consolidado, on="Unidad Territorial", how="left"
    ).merge(
        ponderado_df, on="Unidad Territorial", how="left"
    )

    columnas_finales = ["Unidad Territorial"]
    for i in range(1, 8):
        columnas_finales.append(f"% Ind0{i}")
        columnas_finales.append(f"Estado 0{i}")

    consolidado = consolidado[columnas_finales].fillna(0)
    consolidado.insert(0, "N춿", range(1, len(consolidado) + 1))

    total = {
        "N춿": "",
        "Unidad Territorial": "TOTAL GENERAL"
    }
    for i in range(1, 8):
        col = f"% Ind0{i}"
        if consolidado[col].dtype == object:
            consolidado[col] = pd.to_numeric(consolidado[col].str.replace("%", ""), errors='coerce')
        promedio = round(consolidado[col].mean(), 2)
        total[col] = promedio
        total[f"Estado 0{i}"] = clasificar(promedio)
    total_df = pd.DataFrame([total])
    consolidado = pd.concat([consolidado, total_df], ignore_index=True)

    st.markdown(consolidado.to_html(escape=False, index=False), unsafe_allow_html=True)
    st.download_button("Descargar Consolidado CSV", consolidado.to_csv(index=False).encode("utf-8"), "consolidado_indicadores.csv", "text/csv")

# === Indicador 01 ===
with tabs[0]:
    st.markdown("<h2 style='font-size: 12pt;'>Indicador 01: % de proyectos en ejecuci칩n dentro del plazo</h2>", unsafe_allow_html=True)
    agrupado = df.groupby("txt_zonal").agg(
        Total_General=("txt_proyecto", "count"),
        Dentro_de_plazo=("dentro_plazo", "sum")
    ).reset_index()
    agrupado["Fuera_de_plazo"] = agrupado["Total_General"] - agrupado["Dentro_de_plazo"]
    agrupado["%"] = ((agrupado["Dentro_de_plazo"] / agrupado["Total_General"]) * 100).round(2)
    agrupado["Estado"] = agrupado["%"].apply(clasificar)
    agrupado.rename(columns={"txt_zonal": "Unidad Territorial", "Total_General": "Total General", "Dentro_de_plazo": "Dentro de plazo", "Fuera_de_plazo": "Fuera de plazo"}, inplace=True)
    agrupado.insert(0, "N춿", range(1, len(agrupado) + 1))
    agrupado = agrupado[["N춿", "Unidad Territorial", "Dentro de plazo", "Fuera de plazo", "Total General", "%", "Estado"]]
    total_row = pd.DataFrame({
        "N춿": [""],
        "Unidad Territorial": ["TOTAL GENERAL"],
        "Dentro de plazo": [df[df["dentro_plazo"]].shape[0]],
        "Fuera de plazo": [df[~df["dentro_plazo"]].shape[0]],
        "Total General": [df.shape[0]],
        "%": [round((df["dentro_plazo"].sum() / df.shape[0]) * 100, 2)],
        "Estado": [clasificar(round((df["dentro_plazo"].sum() / df.shape[0]) * 100, 2))]
    })
    resultado = pd.concat([agrupado, total_row], ignore_index=True)
    st.markdown(resultado.to_html(escape=False, index=False), unsafe_allow_html=True)
    zonal_sel = st.selectbox("Selecciona una Unidad Territorial para ver proyectos (Indicador 1):", sorted(df["txt_zonal"].unique()), key="sel_1")
    columnas = ["cod_expediente", "Indicador1", "txt_provincia", "txt_distrito", "txt_proyecto"]
    df_zonal = df[df["txt_zonal"] == zonal_sel][columnas].drop_duplicates()
    df_zonal.rename(columns={"cod_expediente": "Expediente", "Indicador1": "Indicador 1", "txt_provincia": "Provincia", "txt_distrito": "Distrito", "txt_proyecto": "Proyecto"}, inplace=True)
    columnas_finales = ["Expediente", "Indicador 1", "Provincia", "Distrito", "Proyecto"]
    df_zonal = df_zonal[columnas_finales]
    df_zonal.reset_index(drop=True, inplace=True)
    df_zonal.index += 1
    st.markdown(f"<h3 style='font-size: 12pt;'>Lista de Proyectos en {zonal_sel}</h3>", unsafe_allow_html=True)
    st.dataframe(df_zonal)
    st.download_button("Descargar CSV Indicador 01", resultado.to_csv(index=False).encode("utf-8"), "indicador01_por_zonal.csv", "text/csv")
    st.download_button("Descargar Lista de Proyectos", df_zonal.to_csv(index=True).encode("utf-8"), "lista_proyectos_ind1.csv", "text/csv")

# === Indicadores 02 al 05 ===
for i, ind in enumerate(["Indicador2", "Indicador3", "Indicador4", "Indicador5"]):
    with tabs[i+1]:
        nombres_indicadores = [
            "% de rendici칩n de cuentas mensual presentada: importe gasto rendido (presentado)/importe gasto autorizado",
            "% de ejecuci칩n monto aprobado de los proyectos: importe devengado/importe aprobado",
            "% de ejecuci칩n financiera de los proyectos: ejecuci칩n financiera programada vs ejecutada (SEJPRO)",
            "% de ejecuci칩n f칤sica de los proyectos, seg칰n programado"
        ]
        st.markdown(f"<h2 style='font-size: 12pt;'>Indicador 0{i+2}: {nombres_indicadores[i]}</h2>", unsafe_allow_html=True)
        variable = ind
        agrupado = df.groupby("txt_zonal").agg(
            **{
                "Mayor a 90%": (variable, contar_mayor_90),
                "Mayor a 80%": (variable, contar_mayor_80),
                "Menor a 80%": (variable, contar_menor_80),
                "Igual a 0%": (variable, contar_error)
            }
        ).reset_index()
        agrupado["Total General"] = agrupado[["Mayor a 90%", "Mayor a 80%", "Menor a 80%", "Igual a 0%"]].sum(axis=1)
        agrupado["%"] = ((agrupado["Mayor a 90%"] / agrupado["Total General"]) * 100).round(2)
        agrupado["Estado"] = agrupado["%"].apply(clasificar)
        agrupado.rename(columns={"txt_zonal": "Unidad Territorial"}, inplace=True)
        agrupado.insert(0, "N춿", range(1, len(agrupado) + 1))
        columnas_orden = ["N춿", "Unidad Territorial", "Mayor a 90%", "Mayor a 80%", "Menor a 80%", "Igual a 0%", "Total General", "%", "Estado"]
        agrupado = agrupado[columnas_orden]
        total_row = pd.DataFrame({
            "N춿": [""],
            "Unidad Territorial": ["TOTAL GENERAL"],
            "Mayor a 90%": [contar_mayor_90(df[variable])],
            "Mayor a 80%": [contar_mayor_80(df[variable])],
            "Menor a 80%": [contar_menor_80(df[variable])],
            "Igual a 0%": [contar_error(df[variable])]
        })
        total_row["Total General"] = total_row[["Mayor a 90%", "Mayor a 80%", "Menor a 80%", "Igual a 0%"]].sum(axis=1)
        total_row["%"] = round((total_row["Mayor a 90%"] / total_row["Total General"]) * 100, 2)
        total_row["Estado"] = total_row["%"].apply(clasificar)
        resultado = pd.concat([agrupado, total_row], ignore_index=True)
        st.markdown(resultado.to_html(escape=False, index=False), unsafe_allow_html=True)
        zonal_sel = st.selectbox(f"Selecciona una Unidad Territorial para ver proyectos (Indicador {i+2}):", sorted(df["txt_zonal"].unique()), key=f"sel_{i+2}")
        columnas = ["cod_expediente", variable, "txt_provincia", "txt_distrito", "txt_proyecto"]
        df_zonal = df[df["txt_zonal"] == zonal_sel][columnas].drop_duplicates()
        df_zonal[f"Indicador {i+2}"] = (df_zonal[variable] * 100).fillna(0).astype(int).astype(str) + "%"
        df_zonal.rename(columns={"cod_expediente": "Expediente", "txt_provincia": "Provincia", "txt_distrito": "Distrito", "txt_proyecto": "Proyecto"}, inplace=True)
        columnas_finales = ["Expediente", f"Indicador {i+2}", "Provincia", "Distrito", "Proyecto"]
        df_zonal = df_zonal[columnas_finales]
        df_zonal.reset_index(drop=True, inplace=True)
        df_zonal.index += 1
        st.markdown(f"<h3 style='font-size: 12pt;'>Lista de Proyectos en {zonal_sel}</h3>", unsafe_allow_html=True)
        st.dataframe(df_zonal, use_container_width=True)
        st.download_button(f"Descargar CSV Indicador {i+2:02}", resultado.to_csv(index=False).encode("utf-8"), f"indicador{i+2:02}_por_zonal.csv", "text/csv")
        st.download_button("Descargar Lista de Proyectos", df_zonal.to_csv(index=True).encode("utf-8"), f"lista_proyectos_ind{i+2}.csv", "text/csv")

# === Indicador 06 ===
with tabs[5]:
    st.markdown("<h2 style='font-size: 12pt;'>Indicador 06: Observaciones SISCO</h2>", unsafe_allow_html=True)
    st.markdown(df_cisco.to_html(escape=False, index=False), unsafe_allow_html=True)
    st.markdown("""
        <style>
        table {
            table-layout: auto;
            width: 100%;
        }
        th, td {
            max-width: 160px !important;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
        }
        </style>
    """, unsafe_allow_html=True)
    st.download_button("Descargar CSV Indicador 06", df_cisco.to_csv(index=False).encode("utf-8"), "indicador06_reiteraciones.csv", "text/csv")

# === Indicador 07 ===
with tabs[6]:
    st.markdown("<h2 style='font-size: 12pt;'>Indicador 07: Cumplimiento plazo liquidaciones</h2>", unsafe_allow_html=True)
    etapa_sel = st.selectbox("Selecciona etapa del proyecto:", options=["Todas"] + sorted(df_liq["txt_etapa_proyecto"].dropna().unique()))
    df_liq_filtrado = df_liq.copy()
    if etapa_sel != "Todas":
        df_liq_filtrado = df_liq_filtrado[df_liq_filtrado["txt_etapa_proyecto"] == etapa_sel]

    anhos_disponibles = sorted(df_liq_filtrado["anho_inicio_ejec"].dropna().unique())
    anhos_sel = st.multiselect("Selecciona a침o(s) de inicio de ejecuci칩n:", options=anhos_disponibles, default=anhos_disponibles)
    df_liq_filtrado = df_liq_filtrado[df_liq_filtrado["anho_inicio_ejec"].isin(anhos_sel)]

    anhos = sorted(df_liq_filtrado["anho_inicio_ejec"].dropna().unique())
    conteo = df_liq_filtrado.groupby(['txt_zonal', 'anho_inicio_ejec']).size().unstack(fill_value=0)
    conteo = conteo.reindex(columns=anhos, fill_value=0).reset_index()
    conteo.columns.name = None

    conteo['Total General'] = conteo[anhos].sum(axis=1)
    ponderado = sum(conteo[y] * w for y, w in zip([2018, 2019, 2020, 2021], [4, 3, 2, 1]) if y in conteo.columns)
    conteo['%'] = ((1 - ponderado / conteo['Total General']) * 100).round(2)
    conteo['Estado'] = conteo['%'].apply(clasificar)
    conteo.rename(columns={"txt_zonal": "Unidad Territorial"}, inplace=True)
    conteo.insert(0, "N춿", range(1, len(conteo) + 1))

    total_data = {"N춿": [""], "Unidad Territorial": ["TOTAL GENERAL"]}
    for anho in anhos:
        total_data[anho] = [conteo[anho].sum()]
    total_row = pd.DataFrame(total_data)
    total_row['Total General'] = total_row[anhos].sum(axis=1)
    ponderado_total = sum(total_row[y] * w for y, w in zip([2018, 2019, 2020, 2021], [4, 3, 2, 1]) if y in total_row.columns)
    total_row['%'] = ((1 - ponderado_total / total_row['Total General']) * 100).round(2)
    total_row['Estado'] = total_row['%'].apply(clasificar)

    conteo = pd.concat([conteo, total_row], ignore_index=True)

    st.markdown("""
        <style>
        table {
            table-layout: auto;
            width: 100%;
        }
        th, td {
            max-width: 160px !important;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
        }
        </style>
    """, unsafe_allow_html=True)
    conteo = conteo.rename(columns={"%": "%"})

    st.markdown(conteo.to_html(escape=False, index=False), unsafe_allow_html=True)
    st.download_button("Descargar CSV Indicador 07", conteo.to_csv(index=False).encode("utf-8"), "indicador07_inicio_ejecucion.csv", "text/csv")

    st.markdown(f"<h3 style='font-size: 12pt;'>Lista de Proyectos para etapa(s) seleccionada(s)</h3>", unsafe_allow_html=True)
    df_lista = df_liq_filtrado[["cod_expediente", "txt_provincia", "txt_distrito", "txt_proyecto", "txt_zonal", "txt_etapa_proyecto", "anho_inicio_ejec", "A침o T칠rmino"]].drop_duplicates()
    df_lista.rename(columns={
        "cod_expediente": "Expediente",
        "txt_provincia": "Provincia",
        "txt_distrito": "Distrito",
        "txt_proyecto": "Proyecto",
        "txt_zonal": "Unidad Territorial",
        "txt_etapa_proyecto": "Etapa",
        "anho_inicio_ejec": "A침o Inicio"
    }, inplace=True)
    df_lista.reset_index(drop=True, inplace=True)
    df_lista.index += 1
    st.dataframe(df_lista, use_container_width=True)
    st.download_button("Descargar Lista de Proyectos", df_lista.to_csv(index=True).encode("utf-8"), "lista_proyectos_ind7.csv", "text/csv")

    st.markdown("<h3 style='font-size: 12pt;'>Gr치fico de proyectos por a침o de inicio</h3>", unsafe_allow_html=True)
    conteo_grafico = df_liq_filtrado.groupby("anho_inicio_ejec").size().reset_index(name="N춿 Proyectos")
    st.bar_chart(data=conteo_grafico.set_index("anho_inicio_ejec"))